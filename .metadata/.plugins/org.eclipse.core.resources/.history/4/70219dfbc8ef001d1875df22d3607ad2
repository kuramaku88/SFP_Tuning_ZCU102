/***************************** Include Files *********************************/

#include "xparameters.h"
#include "sleep.h"
#include "xiicps.h"
#include "xil_printf.h"
#include "xplatform_info.h"

/************************** Constant Definitions *****************************/

#define IIC_SCLK_RATE		100000
#define SLV_MON_LOOP_COUNT 0x00FFFFFF	/**< Slave Monitor Loop Count*/
#define MUX_ADDR 0x75
#define MAX_CHANNELS 0xFF

/*
 * The page size determines how much data should be written at a time.
 * The write function should be called with this as a maximum byte count.
 */
#define MAX_SIZE	1
#define PAGE_SIZE_16	1
#define PAGE_SIZE_32	1

/*
 * The Starting address in the IIC EEPROM on which this test is performed.
 */
#define EEPROM_START_ADDRESS	0

/**************************** Type Definitions *******************************/

/*
 * The AddressType should be u8 as the address pointer in the on-board
 * EEPROM is 1 byte.
 */
typedef u16 AddressType;


/************************** Function Prototypes ******************************/

s32 IicPsEepromPolledExample(void);
static s32 EepromWriteData(XIicPs *IicInstance, u16 ByteCount);
static s32 EepromReadData(XIicPs *IicInstance, u8 *BufferPtr, u16 ByteCount);
static s32 IicPsSlaveMonitor(u16 Address, u16 DeviceId);
static s32 MuxInitChannel(u16 MuxIicAddr, u8 WriteBuffer);
static s32 FindEepromDevice(u16 Address);
static s32 IicPsFindEeprom(u16 *Eeprom_Addr, u32 *PageSize);
static s32 IicPsConfig(u16 DeviceId);
static s32 IicPsFindDevice(u16 addr);

/************************** Variable Definitions *****************************/
#ifndef TESTAPP_GEN
XIicPs IicInstance;		/* The instance of the IIC device. */
#endif

u32 Platform;

/*
 * Write buffer for writing a page.
 */
u8 WriteBuffer[sizeof(AddressType) ];
u8 ReadBuffer[MAX_SIZE];	/* Read buffer for reading a page. */

/**Searching for the required EEPROM Address and user can also add
 * their own EEPROM Address in the below array list**/
u16 EepromAddr[] = {0x51,0}; //0x51 is A2h/2,, this is used because of 7 bit addressing
u16 MuxAddr[] = {0x75,0}; //0x75 is the MUX address for the SFP Cages
u16 EepromSlvAddr;
u16 PageSlct = 1;
u32 PageSize;



/************************** Function Definitions *****************************/


/*****************************************************************************/
/**
* Main function to call the Iic EEPROM polled example.
*
* @param	None.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
#ifndef TESTAPP_GEN
int main(void)
{
	s32 Status;

	xil_printf("IIC Test \r\n");

	/*
	 * Test read from SFP EEPROM
	 */
	Status = IicPsEepromPolledExample();
	if (Status != XST_SUCCESS) {
		xil_printf("IIC Test Failed\r\n");
		return XST_FAILURE;
	}

	xil_printf("Successfully ran\r\n");
	return XST_SUCCESS;
}
#endif
/*****************************************************************************/
/**
* This function writes, reads, the page select and password bytes one by one and displays the values of each byte before and after reading.
*
* @param	None.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
s32 IicPsEepromPolledExample()
{
	u32 Index;
	s32 Status;
	AddressType Address = EEPROM_START_ADDRESS;
	u32 WrBfrOffset;


	Status = IicPsFindEeprom(&EepromSlvAddr,&PageSize);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*
	 * Initialize the data to write and the read buffer.
	 */
	if (PageSize == PAGE_SIZE_16) {
		WriteBuffer[0] = (u8) (Address);
		WrBfrOffset = 1;
	}


//	Reading Page write byte
	WriteBuffer[0] = (u8) (Address + 127);

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value before changing page 127: %x \r\n", ReadBuffer[0]);
	}

//  Value to be written into the Page Select byte
	WriteBuffer[1] = 0x02;

//	The second parameter is the number of bytes to be written. here we have set it as PageSlct + Offset
//  Offset refers to the size of the address of the register to be written to and PageSlct = 1 as PageSlct is only one byte
	Status = EepromWriteData(&IicInstance, PageSlct + WrBfrOffset );
	if (Status != XST_SUCCESS) {
			xil_printf("Failed at write\r\n");
			return XST_FAILURE;
		}

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value after changing page 127: %x \r\n", ReadBuffer[0]);
	}

//  Reading byte 123 before and after writing 0x58
	WriteBuffer[0] = (u8) (Address + 123);
	WriteBuffer[1] = 0x58;

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value before writing at 123: %x \r\n", ReadBuffer[0]);
	}

	Status = EepromWriteData(&IicInstance, PageSize + WrBfrOffset );
	if (Status != XST_SUCCESS) {
			xil_printf("Failed at write\r\n");
			return XST_FAILURE;
		}

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value after writing at 123: %x \r\n", ReadBuffer[0]);
	}

//  Reading byte 124 before and after writing 0x47
	WriteBuffer[0] = (u8) (Address + 124);
	WriteBuffer[1] = 0x47;


	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value before writing at 124: %x \r\n", ReadBuffer[0]);
	}


	Status = EepromWriteData(&IicInstance, PageSize + WrBfrOffset );
	if (Status != XST_SUCCESS) {
			xil_printf("Failed at write\r\n");
			return XST_FAILURE;
		}

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value after writing at 124: %x \r\n", ReadBuffer[0]);
	}

//  Reading byte 125 before and after writing 0x52
	WriteBuffer[0] = (u8) (Address + 125);
	WriteBuffer[1] = 0x52;


	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value before writing at 125: %x \r\n", ReadBuffer[0]);
	}


	Status = EepromWriteData(&IicInstance, PageSize + WrBfrOffset );
	if (Status != XST_SUCCESS) {
			xil_printf("Failed at write\r\n");
			return XST_FAILURE;
		}

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value after writing at 125: %x \r\n", ReadBuffer[0]);
	}

//  Reading byte 126 before and after writing 0x44
	WriteBuffer[0] = (u8) (Address + 126);
	WriteBuffer[1] = 0x44;

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value before writing at 126: %x \r\n", ReadBuffer[0]);
	}

	Status = EepromWriteData(&IicInstance, PageSize + WrBfrOffset );
	if (Status != XST_SUCCESS) {
			xil_printf("Failed at write\r\n");
			return XST_FAILURE;
		}

	Status = EepromReadData(&IicInstance, ReadBuffer, PageSize);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed at read\r\n");
		return XST_FAILURE;
	}
	else{
		xil_printf("Read value after writing at 126: %x \r\n", ReadBuffer[0]);
	}

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
* This function writes a buffer of data to the IIC serial EEPROM.
*
* @param	ByteCount contains the number of bytes in the buffer to be
*		written.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		The Byte count should not exceed the page size of the EEPROM as
*		noted by the constant PAGE_SIZE.
*
******************************************************************************/
static s32 EepromWriteData(XIicPs *IicInstance, u16 ByteCount)
{

	s32 Status;

	/*
	 * Send the Data.
	 */

	Status = XIicPs_MasterSendPolled(IicInstance, WriteBuffer,
					  ByteCount, EepromSlvAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(IicInstance));

	/*
	 * Wait for a bit of time to allow the programming to complete
	 */
	usleep(250000);

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
* This function reads data from the IIC serial EEPROM into a specified buffer.
*
* @param	BufferPtr contains the address of the data buffer to be filled.
* @param	ByteCount contains the number of bytes in the buffer to be read.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
static s32 EepromReadData(XIicPs *IicInstance, u8 *BufferPtr, u16 ByteCount)
{
	s32 Status;
	AddressType Address = EEPROM_START_ADDRESS;
	u32 WrBfrOffset;

	/*
	 * Position the Pointer in EEPROM.
	 */
//	if (PageSize == PAGE_SIZE_16) {
//		WriteBuffer[0] = (u8) (Address);
    // Size of the register address in writebuffer
    WrBfrOffset = 1;
//	}
//	else {
//		WriteBuffer[0] = (u8) (Address >> 8);
//		WriteBuffer[1] = (u8) (Address);
//		WrBfrOffset = 2;
//	}

	Status = EepromWriteData(IicInstance, WrBfrOffset);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Receive the Data.
	 */

	Status = XIicPs_MasterRecvPolled(IicInstance, BufferPtr,
						  ByteCount, EepromSlvAddr);
	if (Status != XST_SUCCESS) {
			return XST_FAILURE;
	}
	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(IicInstance));

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
* This function initializes the IIC MUX to select the required channel.
*
* @param	MuxAddress and Channel select value.
*
* @return	XST_SUCCESS if pass, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
static s32 MuxInitChannel(u16 MuxIicAddr, u8 WriteBuffer)
{
	u8 Buffer = 0;
	s32 Status = 0;


	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&IicInstance));

	/*
	 * Send the Data.
	 */
	Status = XIicPs_MasterSendPolled(&IicInstance, &WriteBuffer,1,
					MuxIicAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&IicInstance));

	/*
	 * Receive the Data.
	 */
	Status = XIicPs_MasterRecvPolled(&IicInstance, &Buffer,1, MuxIicAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(&IicInstance));

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
* This function perform the initial configuration for the IICPS Device.
*
* @param	DeviceId instance.
*
* @return	XST_SUCCESS if pass, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
static s32 IicPsConfig(u16 DeviceId)
{
	s32 Status;
	XIicPs_Config *ConfigPtr;	/* Pointer to configuration data */

	/*
	 * Initialize the IIC driver so that it is ready to use.
	 */
	ConfigPtr = XIicPs_LookupConfig(DeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}

	Status = XIicPs_CfgInitialize(&IicInstance, ConfigPtr,
					ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*
	 * Set the IIC serial clock rate.
	 */
	XIicPs_SetSClk(&IicInstance, IIC_SCLK_RATE);
	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function is use to figure out the slave device is alive or not.
*
* @param        slave address and Device ID .
*
* @return       XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note         None.
*
*******************************************************************************/

static s32 IicPsFindDevice(u16 addr)
{
	s32 Status;

//	Status = IicPsSlaveMonitor(addr,0);
//	if (Status == XST_SUCCESS) {
//		return XST_SUCCESS;
//	}
	Status = IicPsSlaveMonitor(addr,1);
	if (Status == XST_SUCCESS) {
		return XST_SUCCESS;
	}

	return XST_FAILURE;
}
/*****************************************************************************/
/**
* This function is use to figure out the Eeprom slave device
*
* @param	addr: u16 variable
*
* @return	XST_SUCCESS if successful and also update the epprom slave
* device address in addr variable else XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
static s32 IicPsFindEeprom(u16 *Eeprom_Addr,u32 *PageSize)
{
	s32 Status;
	u32 MuxIndex,Index;
	u8 MuxChannel;

	for(MuxIndex=0;MuxAddr[MuxIndex] != 0;MuxIndex++){
		Status = IicPsFindDevice(MuxAddr[MuxIndex]);
		if (Status == XST_SUCCESS) {
			for(Index=0;EepromAddr[Index] != 0;Index++) {
				for(MuxChannel = MAX_CHANNELS; MuxChannel >= 0xFF; MuxChannel = MuxChannel - 1) {
					Status = MuxInitChannel(MuxAddr[MuxIndex], MuxChannel);
					xil_printf("MuxCHannel: %x \r\n",MuxChannel);
					if (Status != XST_SUCCESS) {
						xil_printf("Failed to enable the MUX channel\r\n");
						return XST_FAILURE;
					}

					Status = MuxInitChannel(MuxAddr[MuxIndex], MuxChannel);

					Status = FindEepromDevice(EepromAddr[Index]);
					if (Status == XST_SUCCESS) {
						*Eeprom_Addr = EepromAddr[Index];
						*PageSize = PAGE_SIZE_16;
						xil_printf("MuxAddr: %x \r\n",MuxAddr[MuxIndex]);
//						xil_printf("MuxCHannel: %x \n",MuxChannel);
						xil_printf("EepromAddr: %x \r\n",EepromAddr[Index]);
						return XST_SUCCESS;
					}
				}
			}
		}
	}
	for(Index=0;EepromAddr[Index] != 0;Index++) {
		Status = IicPsFindDevice(EepromAddr[Index]);
		if (Status == XST_SUCCESS) {
			*Eeprom_Addr = EepromAddr[Index];
			*PageSize = PAGE_SIZE_32;
			return XST_SUCCESS;
		}
	}
	return XST_FAILURE;
}
/*****************************************************************************/
/**
*
* This function checks the availability of EEPROM using slave monitor mode.
*
* @param	EEPROM address.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note 	None.
*
*******************************************************************************/
static s32 FindEepromDevice(u16 Address)
{
	u32 Index,IntrStatusReg;
	XIicPs *IicPtr = &IicInstance;


	XIicPs_EnableSlaveMonitor(&IicInstance, Address);

	Index = 0;
	/*
	 * Wait for the Slave Monitor status
	 */
	while (Index < SLV_MON_LOOP_COUNT) {
		Index++;
		/*
		 * Read the Interrupt status register.
		 */
		IntrStatusReg = XIicPs_ReadReg(IicPtr->Config.BaseAddress,
						 (u32)XIICPS_ISR_OFFSET);
		if (0U != (IntrStatusReg & XIICPS_IXR_SLV_RDY_MASK)) {
			XIicPs_DisableSlaveMonitor(&IicInstance);
			XIicPs_WriteReg(IicPtr->Config.BaseAddress,
					(u32)XIICPS_ISR_OFFSET, IntrStatusReg);
			return XST_SUCCESS;
		}
	}
	XIicPs_DisableSlaveMonitor(&IicInstance);

	return XST_FAILURE;
}

/*****************************************************************************/
/**
*
* This function checks the availability of a slave using slave monitor mode.
*
* @param	DeviceId is the Device ID of the IicPs Device and is the
*		XPAR_<IICPS_instance>_DEVICE_ID value from xparameters.h
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note 	None.
*
*******************************************************************************/
static s32 IicPsSlaveMonitor(u16 Address, u16 DeviceId)
{
	u32 Index,IntrStatusReg;
	s32 Status;
	XIicPs *IicPtr;

	/*
	 * Initialize the IIC driver so that it is ready to use.
	 */
	Status = IicPsConfig(DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	IicPtr = &IicInstance;
	XIicPs_EnableSlaveMonitor(&IicInstance, Address);

	Index = 0;
	/*
	 * Wait for the Slave Monitor Status
	 */
	while (Index < SLV_MON_LOOP_COUNT) {
		Index++;
		/*
		 * Read the Interrupt status register.
		 */
		IntrStatusReg = XIicPs_ReadReg(IicPtr->Config.BaseAddress,
						 (u32)XIICPS_ISR_OFFSET);
		if (0U != (IntrStatusReg & XIICPS_IXR_SLV_RDY_MASK)) {
			XIicPs_DisableSlaveMonitor(&IicInstance);
			XIicPs_WriteReg(IicPtr->Config.BaseAddress,
					(u32)XIICPS_ISR_OFFSET, IntrStatusReg);
			return XST_SUCCESS;
		}
	}
	XIicPs_DisableSlaveMonitor(&IicInstance);
	return XST_FAILURE;
}
